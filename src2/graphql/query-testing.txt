
**** create block *****

mutation{
createBlock(blockInput:{name:"A1",location:"Tripoli"}){
  _id
}
}

**** create service ******
mutation{
  createService(name:"water"){
    _id
  }
}

**** create subscription ****
mutation{
 createSub(subInput:{email:"m.faredsaleh",block:"A1",name:"AAA"}){
  _id
  name
  block{
    _id
  }}}

  **** add service to already exsisting subscription ***
    mutation{
    addSerToSub(serviceName:"cleaning",subName:"CCC"){
     _id
     name
     subscriptionId{
    _id
     }}}


     **** create one user with privilage of admin or not ****
     mutation{
  createUser(userInput:{email:"ahmed",password:"123456",isAdmin:true}){
    _id
    email
    password
    isAdmin
  }
}



**** service query ****
  query{
  oneService(name:"water"){
  _id
  name
  subscriptionId{
  _id
  name
  user{
  _id
  }
  block{
  _id
  }}}}


   **** user query ****
  query{
   login(userInput:{email:"faredmohamed",password:"123456"}){
    token
    userId
    isAdmin
    isSuperAdmin}}




***** apollo client query with input varibale ****
this.apollo
      .watchQuery<any>({
        query: gql`
          query($email: String!, $password: String!) {
            login(userInput: { email: $email, password: $password }) {
              token
              userId
              isAdmin
              isSuperAdmin
            }
          }
        `,
        variables: {
          email: 'faredmohamed',
          password: '123456',
        },
      })
      .valueChanges.subscribe(
        result => {
          // this._id = result.data._id;
          // this.isAdmin = result.data.isAdmin;
          // this.email = result.data.email;
          console.log(result.data);
        }




      this.apollo
      .watchQuery<any>({
        query: gql`
          query($email: String!, $password: String!) {
            login(userInput: { email: $email, password: $password }) {
              token
              userId
              isAdmin
              isSuperAdmin
            }
          }
        `,
        variables: {
          email: 'faredmohamed',
          password: '123456',
        },
      })





      this.apollo
      .mutate({
        mutation: gql`
          mutation($email: String!, $password: String!, $isAdmin: Boolean) {
            createUser(userInput: { email: $email, password: $password, isAdmin: $isAdmin }) {
              _id
              email
              password
              isAdmin
            }
          }
        `,
        variables: {
          email: 'reem',
          password: '123456',
          isAdmin: true,
        },
      })
      .subscribe(
        result => {
          // this._id = result.data._id;
          // this.isAdmin = result.data.isAdmin;
          // this.email = result.data.email;
          console.log(result.data);
        }


**********************
        grapql module 

        import {NgModule} from '@angular/core';
import {ApolloModule, APOLLO_OPTIONS} from 'apollo-angular';
import {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';
import {InMemoryCache} from 'apollo-cache-inmemory';

const uri = 'http://localhost:4000/graphql'; // <-- add the URL of the GraphQL server here
export function createApollo(httpLink: HttpLink) {
  return {
    link: httpLink.create({uri}),
    cache: new InMemoryCache(),
  };
}

@NgModule({
  exports: [ApolloModule, HttpLinkModule],
  providers: [
    {
      provide: APOLLO_OPTIONS,
      useFactory: createApollo,
      deps: [HttpLink],
    },
  ],
})
export class GraphQLModule {}

********